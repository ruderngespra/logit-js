
Das nächste Problem für diese basale Version:

Ich habe jetzt etwas, das nach jeder durch ";" getrennten Einheit, die
let, const oder var enthält, eine Zeile einfügt, die loggt.

Doch in den Momenten, in denen Kommentare präsent sind, wird wieder
alles zerschossen.

Was muss ich tun, um dieses Problem zu umgehen?

- 1. Kommentare als solche erfassen, und auch erfassen, wie viele
  Zeilen lang sie sind, und dann diese Zeilen aus der aktuellen
  Zählung mit false ausklammern.

- 2. Und dann aber hinterher, wenn alles wieder zusammengebaut wird,
  auch diese blocks entsprechend einbauen.

---

Vielleicht wäre es gut, Kommentarblöcke als nur EINE einheit zu
erfassen.

Wie sehen sie aus?

Es gibt grundsätzlich zwei Varianten:

1. Vorne // und hinten \n

2. Vorne /* und hinten */

Dafür lassen sich simple RegExes schreiben.

---

Aber bisher beim Zusammenbauen nutze ich ";" als join.

Das macht am Ende von Kommentaren ausdrücklich keinen Sinn.

---

Aber das sind alles überbrückbare Probleme.

Man könnte erst an alle Kommentare ein ; oder COMMENT; String anfügen, und
dieser könnte dann als Marker dienen, dass diese Teile des Programms
anders behandelt werden müssen.

Probiere ich mal aus.

Also, erst einmal die regular expressions.

---

nächstes Problem: Wie wird es mit leerzeilen aussehen?

Die kann prettier hinterher nicht einfach wieder automatisch einbauen,
denn sie wurden komplett gelöscht.


---

Also, im Moment möchte ich vor allem: Eine Version entwickeln, die
Kommentare ausklammert etc. und klare und hilfreiche grenzen setzt.

Ich kann ja mal ein paar Logik-Schritte in Module auslagern und üben.

Erster Schritt: Den Teil des Textes finden, der mit den Markern
ausgeklammert wurde.

Dazu eine Funktion schreiben.

Ein eigenes Mini-Modul:

Es nimmt zwei optionale Parameter start und end an.

Oder sagen wir eher: Es nimmt ein config objekt an:

Wie ist die Spezifikation?

Und hier ist es wichtig, von anfang an einheitlich zu bleiben, das
erspart mir arbeit später.

type: lineNumber, values: {start: ..., end: ...}
type: marker, values: {start: startstring, end: endstring}

So etwa.

---

Also, noch genauer: Es nimmt einen String, eben den code, und als
ZWEITES Objekt nimmt es dieses config-objekt an.

Und was gibt es aus?

Nur diesen Teil?

Moment, es erscheint mir schon jetzt sinnvoll, das auch schon
aufzuteilen. Dieses Modul kann nicht beides machen. Sondern es muss
IMMER. Zeilennummern und nie marker nehmen. Und die Zeilennummern
müssen eben schon vorher mit einer Helfer-Funktion gefunden werden.

---

Also, Schritte für mich erstmal:

---

Und jetzt mal versuchen, prettier so zu implentieren, dass es
IRGENDETWAS an meinem string verändert.

Das heißt, schritte: prettier irgendwie requiren, auf meinen String
anwenden, möglichst ohne eval oder ähnliches, und dann den output
zurückgeben.

---

Aber nächste Issues: Wenn ich nur vage Teile des Codes mit prettier
formattiere, beschwert sich das Programm, weil potenziell kein
abgeschlossener Code.

Wenn ich aber alles laufen lasse kann es sein, dass die zeichenanzahl
für das spätere zusammenfügen nicht mehr läuft.

---

Und nächstes Problem: Prettier änder auch sonst viel zu viel. Ich will
ja, dass es den Code wirklich NUR bei den Semikolons anfässt, alles
andere soll so bleiben wie zuvor. Doch jetzt gerade gibt es ganz viele
Default Änderungen, die angewandt werden.

vielleicht ist selbst prettier hier ein overkill und ich brauche ein
simpleres Package.

---

puh, aber das kleine paket automatic-semicolon-insertion scheint auch
nicht zu laufen.

nächste idee: eslint mit automatischen --fix.

also eslint drüber laufen lassen mit den semicolons required und dann
eben fix, weil so ein fix immer automatisch leicht ist.

mit --rule ??

eslint --no-eslintrc --rule 'semi: 2' tmp2.js

Etwas in dieser Richtung kann gehen:

eslint OHNE config ausführen mit NUR EINER regel, nämlich semi, die
auf zwei das heißt auf streng gestellt wird.

Bzw. also eher so:

eslint --no-eslintrc --rule 'semi: 2' --fix tmp2.js

Mit automatischem Fix.

Und das jetzt nicht als cli sondern im code.

Hier:

https://eslint.org/docs/developer-guide/nodejs-api

Ja, das hier scheint genau das zu sein, was ich brauche:

https://eslint.org/docs/developer-guide/nodejs-api#linterverifyandfix

eslint also?

https://eslint.org/docs/developer-guide/nodejs-api#linterdefinerule

--- auch hier scheint es noch probleme zu geben.

wenn eslint keine rules hat, gar keine, dann versteht es auch nicht,
wo die semicolons gesetzt werden sollen, und logischerweise wirft es
fehler aus.

Ich habe jetzt also drei Ansätze versucht, die alle nervig werden
irgendwo. Aber grundsätzlich wird sich da eine Lösung finden lassen.

---

https://github.com/IanVS/eslint-nibble

---

Grundsätzlich: Eine dieser Integrationen muss es am Ende machen, im
besten Fall ziemlich lightweigt.

---

Nächster Gedanke: Was wäre denn, wenn man wirklich eslint noch für
viel mehr nutzt. Babel, Eslint oder eben Prettier, diese Programme
stellen ja eine riesige Grundfunktionalität zum Bewegen in Dokumenten
bereit.

Man könnte überlegen, ein babel plugin zu schreiben, also logit als
babel plugin zu nutzen.


