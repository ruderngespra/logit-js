const express = require('express');
console.log({ express });
const app = express();
console.log({ app });
const compression = require('compression');
console.log({ compression });
const csurf = require('csurf');
console.log({ csurf });
app.use(require('body-parser').json());
app.use(
    require('cookie-session')({
        secret: 'I am nearly always happy.',
        maxAge: 24 * 60 * 60 * 1000,
    })
);
app.use(csurf());
app.use(function(req, res, next) {
    res.cookie('mytoken', req.csrfToken());
    next();
});
const pwUtils = require('./pwUtils.js');
console.log({ pwUtils });
const dbUtils = require('./dbUtils.js');
console.log({ dbUtils });
app.use(express.static('./public'));
app.use(compression());
if (process.env.NODE_ENV != 'production') {
    app.use(
        '/bundle.js',
        require('http-proxy-middleware')({ target: 'http://localhost:8081/' })
    );y
} else {
    app.use('/bundle.js', (req, res) => res.sendFile(`${__dirname}/bundle.js`));
} // lg-startapp.post('/register', (req, res) => {    (async function() {        try {            let registrationData = req.body;console.log({registrationData});            const hashedPassword = await pwUtils.hashPassword(                registrationData.password            );console.log({hashedPassword});            registrationData.password = hashedPassword;            const user_id = await dbUtils.addRowToUsersAndReturnId(                registrationData            );console.log({user_id});            req.session = {                ...req.session,                user_id,                first_name: req.body.first_name,                last_name: req.body.last_name,            };            res.json({ success: true });        } catch (err) {            console.log('Error in /register: ', err.message);            res.json({ sucess: false });        }    })();});// lg-endapp.post('/login', (req, res) => {    (async function login() {        console.log('req.body at /login: ', req.body);        try {            let loginData = req.body;console.log({loginData});            const { password: passwordUser, mail } = loginData;console.log({{});            const passwordHash = await dbUtils.getPasswordForSpecificMailInUsers(                mail            );console.log({passwordHash});            const passwordIsCorrect = await pwUtils.checkPassword(                passwordUser,                passwordHash            );console.log({passwordIsCorrect});            if (passwordIsCorrect) {                const userInfo = await dbUtils.getfirstNameLastNameIdForSpecificMailInUsers(                    mail                );console.log({userInfo});                req.session = { ...req.session, ...userInfo };                res.json({ success: true });            } else {                return res.json({ sucess: false });            }        } catch (err) {            console.log('Error in /login route: ', err.message);            return res.json({ success: false });        }    })();});app.get('/welcome', (req, res) => {    if (req.session.user_id) {        res.redirect('/');    } else {        res.sendFile(__dirname + '/index.html');    }});app.get('*', function(req, res) {    if (!req.session.user_id) {        res.redirect('/welcome');    } else {        res.sendFile(__dirname + '/index.html');    }});app.listen(8080, function() {    console.log("I'm listening.");});
